services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pms_postgres
    environment:
      POSTGRES_DB: permit_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "${POSTGRES_HOST_PORT:-15432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: pms_server
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/permit_manager
      JWT_SECRET: your-super-secret-jwt-key-here
      PORT: 5000
      CLIENT_URL: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./server/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pms_network
    working_dir: /app
    command: npm run dev

  # Frontend React App
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: pms_client
    environment:
      REACT_APP_API_URL: http://server:5000/api
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - pms_network
    working_dir: /app
    command: npm start

volumes:
  postgres_data:

networks:
  pms_network:
    driver: bridge
