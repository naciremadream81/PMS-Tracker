services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pms_postgres_prod
    environment:
      POSTGRES_DB: permit_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pms_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: pms_server_prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/permit_manager
      JWT_SECRET: ${JWT_SECRET}
      PORT: 5000
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-pdf,doc,docx,xls,xlsx,jpg,jpeg,png}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "5000:5000"
    volumes:
      - ./server/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pms_network
    restart: unless-stopped
    working_dir: /app
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend React App
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: pms_client_prod
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost:5000}/api
      REACT_APP_VERSION: ${REACT_APP_VERSION:-1.0.0}
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - pms_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  pms_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
